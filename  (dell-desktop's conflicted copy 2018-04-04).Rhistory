tt<-test(est)
tt$effect<-variable
}
ff<-test(est,joint=T,by=preds)
list(tt,ff)
}
### define the levels at which we want the simple slope #####
### in this case, -SD, mean, -SD
zlevels<-c(mean(dat$zexer)-sd(dat$zexer),mean(dat$zexer),mean(dat$zexer)+sd(dat$zexer))
### then we run emtrends where specs is the moderator, var= the IV, and "at" the levels ##
jcont<-"deviation"
contrasts(dat$q)<-lf.createContrasts(levels(dat$q),jcont)
attr(dat$q,"jcontrast")<-jcont
model<-lm(yendu~zexer*xage*q,data=dat)
tt<-simpleEstimates(model,"q","zexer",threeway = "xage",conditioning = "mean_offset",span=1)
tt
tt<-simpleEstimates(model,"q","zexer",threeway = "xage",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"q","zexer",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"zexer","q",conditioning = "mean_sd",span=1)
tt
dat<-read.csv("extdata/dat3x2x2_mixed.csv")
dat$wfac3<-factor(dat$wfac3)
dat$bfac<-factor(dat$bfac)
dat$cluster<-factor(dat$cluster)
library(lmerTest)
jcont<-"deviation"
contrasts(dat$wfac3)<-lf.createContrasts(levels(dat$wfac3),jcont)
attr(dat$wfac3,"jcontrast")<-jcont
jcont<-"deviation"
contrasts(dat$bfac)<-lf.createContrasts(levels(dat$bfac),jcont)
attr(dat$bfac,"jcontrast")<-jcont
model<-lmer(y~(1|cluster)+x*wfac3*bfac,data=dat)
summary(model)
tt<-simpleEstimates(model,"x","wfac3",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"bfac","wfac3")
tt
tt<-simpleEstimates(model,"bfac","wfac3",threeway = "x")
tt
model<-lm(y~(1|cluster)+x*wfac3*bfac,data=dat)
summary(model)
tt<-simpleEstimates(model,"x","wfac3",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"bfac","wfac3")
tt
tt<-simpleEstimates(model,"bfac","wfac3",threeway = NULL)
tt
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
model<-lmer(y~(1|cluster)+x*wfac3*bfac*`wfac3 more`,data=dat)
dat$wfac3.more
model<-lmer(y~(1|cluster)+x*wfac3*bfac*wfac3.more,data=dat)
summary(model)
tt<-simpleEstimates(model,"x","wfac3",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"bfac","wfac3","wfac3.more",conditioning = "mean_sd",span=1)
model<-lmer(y~(1|cluster)+x*wfac3*bfac*wfac3.more,data=dat)
model<-lmer(y~(1|cluster)+x*wfac3*bfac*wfac3.more,data=dat)
summary(model)
summary(model)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
model<-lmer(y~(1|cluster)+x*wfac3*bfac*wfac3.more,data=dat)
summary(model)
model<-lmer(y~(1|cluster)+x*bfac*wfac3.more,data=dat)
summary(model)
tt<-simpleEstimates(model,"x","wfac3",conditioning = "mean_sd",span=1)
tt
model<-lmer(y~(1|cluster)+x*bfac*wfac3,data=dat)
summary(model)
tt<-simpleEstimates(model,"x","wfac3",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"x","wfac3",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"wfac3","x",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"wfac3","x",conditioning = "mean_sd",span=1)
grid<-emmeans::ref_grid(model,at=condlist)
grid<-emmeans::ref_grid(model,at=c("x"))
grid
est<-emmeans::contrast(grid,by=preds,method = ".internal",adjust = "none")
est<-emmeans::contrast(grid,by=c("x"))
est
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
grid
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
est<-emmeans::contrast(grid,by=c("x"))
tt<-emmeans::test(est)
tt
tt<-emmeans::test(est)
tt
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=0))
contrasts(dat$bfac)<-lf.createContrasts(levels(dat$bfac),jcont)
attr(dat$bfac,"jcontrast")<-jcont
dat$bfac
model<-lmer(y~(1|cluster)+x*bfac*wfac3,data=dat)
summary(model)
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=0))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=0))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=1))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=0))
model<-lmer(y~(1|cluster)+x*bfac*wfac3,data=dat)
summary(model)
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=0))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=0))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
est<-emmeans::contrast(grid,by=c("x"))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=c(0)))
model<-lmer(y~(1|cluster)+x*bfac*wfac3,data=dat)
summary(model)
terms(model)
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=c(0)))
est<-emmeans::contrast(grid,by=c("x"))
tt<-emmeans::test(est)
tt
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
est<-emmeans::contrast(grid,by=c("x"))
tt<-emmeans::test(est)
tt
est<-emmeans::contrast(grid,by=c("x"))
est<-emmeans::contrast(grid,by=c("x"),simple=c("bfac"))
tt<-emmeans::test(est)
tt
est<-emmeans::contrast(grid,by=c("x"),simple=c("wfac3"))
tt<-emmeans::test(est)
tt
est<-emmeans::contrast(grid,by=c("x"),simple=c("wfac3","bfac"))
tt<-emmeans::test(est)
tt
est<-emmeans::contrast(grid,by=c("x"),simple=c("wfac3")))
est<-emmeans::contrast(grid,by=c("x"),simple=c("wfac3")))
est<-emmeans::contrast(grid,by=c("x"),simple=c("wfac3"))
est
est<-emmeans::contrast(grid,by=c("x"))
tt<-emmeans::test(est)
tt
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)),combine=T)
grid
est<-emmeans::contrast(grid,by=c("x"))
est
est<-emmeans::contrast(grid,by=c("x"),,combine=T)
tt
tt<-emmeans::test(est,combine=T)
tt
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
est<-emmeans::contrast(grid,by=c("x"),)
tt<-emmeans::test(est,combine=T)
tt
tt<-simpleEstimates(model,"wfac3","x",conditioning = "mean_sd",span=1)
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
est<-emmeans::contrast(grid,by=c("x"),)
tt<-emmeans::test(est,combine=T)
tt
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
est<-emmeans::contrast(grid,~wfac3,by=c("x"),)
est<-emmeans::contrast(grid,specs=~wfac3,by=c("x"),)
est
est<-emmeans::contrast(grid,by=c("x"),)
est
tt<-emmeans::test(est)
tt
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
grid
grid<-emmeans::ref_grid(model,at=c("x"=c(1,0,2)))
grid
grid<-emmeans::ref_grid(model,at=c("x"=c(1,0,2)))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
grid
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=0))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2),"bfac"=c(0)))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
grid
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)),interaction=F)
grid
est<-emmeans::contrast(grid,by=c("x"),)
est
est<-emmeans::contrast(grid,by=c("x"),interaction=F)
est
est<-emmeans::contrast(grid,by=c("x"),at=c("bfac"=0))
est
est<-emmeans::contrast(grid,by=c("x"),at=c("bfac"=0))
est<-emmeans::contrast(grid,by=c("x"),at=c("bfac"=0))
est
est<-emmeans::contrast(grid,by=c("x"))
est<-emmeans::contrast(grid,by=c("x"))
est
est<-emmeans::contrast(model,by=c("x"))
est<-emmeans::emmeans(model,by=c("x"))
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x"))
est
est<-emmeans::emmeans(model,specs=c("wfac3"),at=list("x"=c(1,0,-1)))
est
est<-emmeans::emmeans(model,specs=c("wfac3"),cov.reduce=list("x"=c(1,0,-1)))
est<-emmeans::emmeans(model,specs=c("wfac3"),by=list("x"=c(1,0,-1)))
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x"))
est
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x"),cov.reduce=list("x"=c(-1,0,1)))
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x"),cov.reduce=list("x"=c(-1,0,1)))
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x"),at=list("x"=c(-1,0,1)))
est
tt<-emmeans::test(est,)
tt
tt<-emmeans::test(est)
tt
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x"),at=list("x"=c(-1,0,1)))
est
contrast(est)
tt<-emmeans::test(est)
tt
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x"),at=list("x"=c(-1,0,1)))
contrast(est)
contrast(est,method="consec")
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x","bfac"),at=list("x"=c(-1,0,1)))
est
contrast(est,method="consec")
cc<-contrast(est,method="consec")
as.data.frame(cc)
tt<-emmeans::test(est)
tt
as.data.frame(cc)
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x","bfac"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method="consec")
as.data.frame(cc)
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method="consec")
as.data.frame(cc)
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("bfac"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method="consec")
as.data.frame(cc)
as.data.frame(cc)
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("bfac"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method="consec")
as.data.frame(cc)
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("bfac","x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method="consec")
as.data.frame(cc)
cc<-contrast(est,method=",internal")
.internal.emmc<<-function(levs) {
# remove possible average covariates values in the levels passed by emmeans
levs<-sapply(levs,function(b) {
v<-strsplit(b,",")[[1]]
v[length(v)]
})
# get the contrast weights
codes<-contrasts(data[[variable]])
# transform the model matrix into the contrast matrix
n<-length(levs)
M <- as.data.frame(ginv(t(codes)))
# set some labels
names(M) <- lf.contrastLabels(levs,attr(data[[variable]],"jcontrast"))
attr(M, "desc") <- attr(data[[variable]],"jcontrast")
M
}
.internal.emmc<<-function(levs) {
print(levs)
# remove possible average covariates values in the levels passed by emmeans
levs<-sapply(levs,function(b) {
v<-strsplit(b,",")[[1]]
v[length(v)]
})
# get the contrast weights
codes<-contrasts(data[[variable]])
# transform the model matrix into the contrast matrix
n<-length(levs)
M <- as.data.frame(ginv(t(codes)))
# set some labels
names(M) <- lf.contrastLabels(levs,attr(data[[variable]],"jcontrast"))
attr(M, "desc") <- attr(data[[variable]],"jcontrast")
M
}
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("bfac","x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=",internal")
cc<-contrast(est,method=".internal")
est<-emmeans::emmeans(model,specs=c("wfac3"),by=c("bfac","x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
as.data.frame(cc)
cc<-contrast(est,method=".internal")
est<-emmeans::emmeans(model,specs=c("x"),by=c("bfac"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
est<-emmeans::emmeans(model,specs=c("bfac"),by=c("wfac3","x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
library(jmvcore)
dat<-read.csv("extdata/exercise.csv")
dat$q<-c(0,0,rep(c(0,1,2),81))
dat$q<-factor(data$q)
library(MASS)
library(emmeans)
### some conditioning function for the jamovi interface, plus numeric values and custom function for R interface
.condition_values<-function(datavar,conditioning,span) {
if (is.numeric(conditioning)){
return(conditioning)
}
fun<-try(get(conditioning),silent = T)
if (!isError(fun))
return(fun(datavar))
if (conditioning=="mean_sd") {
.mean<-mean(datavar)
.sd<-sd(datavar)
return(round(c(.mean-.sd,.mean,.mean+.sd),digits = 3))
}
if (conditioning=="mean_offset") {
.mean<-mean(datavar)
return(round(c(.mean-span,.mean,.mean+span),digits = 3))
}
if (conditioning=="percent") {
return(round(quantile(datavar,c(.25,.5,.75))),digits=3)
}
if (conditioning=="percent_offset") {
return(round(quantile(datavar,c(.5-span,.5,.5+span)),digits=3))
}
}
#### simple Effects estimates: parameters  table and anova table
simpleEstimates<-function(model,variable,moderator,threeway=NULL,conditioning="mean_sd",span=0) {
data<-mf.getModelData(model)
### prepare the conditioning values
condlist<-list()
.cond<-conditioning
preds<-c(threeway,moderator)
for (name in preds)
if (!is.factor(data[[name]])) {
if (is.list(conditioning) && (name %in% names(conditioning)))
.cond<-conditioning[[name]]
mlevels<-.condition_values(data[[name]],conditioning=.cond,span=span)
condlist[[name]]<-mlevels
}
#use a grid for factors
if (is.factor(data[[variable]])) {
.internal.emmc<<-function(levs) {
# remove possible average covariates values in the levels passed by emmeans
levs<-sapply(levs,function(b) {
v<-strsplit(b,",")[[1]]
v[length(v)]
})
# get the contrast weights
codes<-contrasts(data[[variable]])
# transform the model matrix into the contrast matrix
n<-length(levs)
M <- as.data.frame(ginv(t(codes)))
# set some labels
names(M) <- lf.contrastLabels(levs,attr(data[[variable]],"jcontrast"))
attr(M, "desc") <- attr(data[[variable]],"jcontrast")
M
}
grid<-ref_grid(model,at=condlist)
print(preds)
est<-contrast(grid,by=preds,method = ".internal",adjust = "none")
tt<-test(est)
tt<-cbind(tt)
tt<-tt[c(preds,"contrast","estimate","SE","df","t.ratio","p.value")]
} else {
est<-emtrends(model,specs=preds,var=variable,at=condlist)
tt<-test(est)
tt$effect<-variable
}
ff<-test(est,joint=T,by=preds)
list(tt,ff)
}
### define the levels at which we want the simple slope #####
### in this case, -SD, mean, -SD
zlevels<-c(mean(dat$zexer)-sd(dat$zexer),mean(dat$zexer),mean(dat$zexer)+sd(dat$zexer))
### then we run emtrends where specs is the moderator, var= the IV, and "at" the levels ##
jcont<-"deviation"
contrasts(dat$q)<-lf.createContrasts(levels(dat$q),jcont)
attr(dat$q,"jcontrast")<-jcont
model<-lm(yendu~zexer*xage*q,data=dat)
tt<-simpleEstimates(model,"q","zexer",threeway = "xage",conditioning = "mean_offset",span=1)
tt
tt<-simpleEstimates(model,"q","zexer",threeway = "xage",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"q","zexer",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"zexer","q",conditioning = "mean_sd",span=1)
tt
dat<-read.csv("extdata/dat3x2x2_mixed.csv")
dat$wfac3<-factor(dat$wfac3)
dat$bfac<-factor(dat$bfac)
dat$cluster<-factor(dat$cluster)
library(lmerTest)
jcont<-"deviation"
contrasts(dat$wfac3)<-lf.createContrasts(levels(dat$wfac3),jcont)
attr(dat$wfac3,"jcontrast")<-jcont
jcont<-"deviation"
dat$wfac3.more
contrasts(dat$bfac)<-lf.createContrasts(levels(dat$bfac),jcont)
attr(dat$bfac,"jcontrast")<-jcont
model<-lmer(y~(1|cluster)+x*bfac*wfac3,data=dat)
summary(model)
terms(model)
grid<-emmeans::ref_grid(model,at=list("x"=c(1,0,2)))
.internal.emmc<<-function(levs) {
print(levs)
# remove possible average covariates values in the levels passed by emmeans
levs<-sapply(levs,function(b) {
v<-strsplit(b,",")[[1]]
v[length(v)]
})
# get the contrast weights
codes<-contrasts(data[[variable]])
# transform the model matrix into the contrast matrix
n<-length(levs)
M <- as.data.frame(ginv(t(codes)))
# set some labels
names(M) <- lf.contrastLabels(levs,attr(data[[variable]],"jcontrast"))
attr(M, "desc") <- attr(data[[variable]],"jcontrast")
M
}
est<-emmeans::emmeans(model,specs=c("bfac"),by=c("wfac3","x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
as.data.frame(cc)
tt<-emmeans::test(est)
tt
tt<-simpleEstimates(model,"wfac3","x",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"bfac","wfac3")
tt
tt<-simpleEstimates(model,"bfac","wfac3",threeway = "x")
tt
model<-lm(y~(1|cluster)+x*wfac3*bfac,data=dat)
summary(model)
tt<-simpleEstimates(model,"bfac","wfac3","wfac3.more",conditioning = "mean_sd",span=1)
tt
tt<-simpleEstimates(model,"bfac","wfac3")
tt
tt<-simpleEstimates(model,"bfac","wfac3",threeway = NULL)
tt
est<-emmeans::emmeans(model,specs=c("bfac"),by=c("wfac3","x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
as.data.frame(cc)
est<-emmeans::emmeans(model,specs=c("bfac"),by=c("x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
as.data.frame(cc)
params<-as.data.frame(cc)
est<-emmeans::emmeans(model,specs=c("bfac"),by=c("x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
as.data.frame(cc)
cc
est
cc<-contrast(est,method=".internal")
cc
test(cc,joint = T)
est<-emmeans::emmeans(model,specs=c("bfac"),by=c("wfac3","x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
test(cc,joint = T)
cc
test(cc,joint = T)
test(cc,joint = T,by=c("x"))
est<-emmeans::emmeans(model,specs=c("bfac"),by=c("x"),at=list("x"=c(-1,0,1)))
cc<-contrast(est,method=".internal")
as.data.frame(cc)
cc
test(cc,joint = T,by=c("x"))
test(cc,joint = T,by=c("x","bfac"))
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
