cp<-system(paste("cp -r ",paste0(here,"/*"),target))
setwd(target)
(cmdz<-paste("gitversion",version))
system(cmdz)
setwd(here)
cp<-system(paste0("cp gamlj.jmo ",binaries,"/gamlj_linux.jmo"))
setwd(binaries)
git<-system(paste("gitroutine",version))
setwd(here)
library(yaml)
check.version<-function() {
desc<-yaml.load_file("DESCRIPTION")
versio<-desc$Version
j000<-yaml.load_file("jamovi/0000.yaml")
j000$version
if (j000$version!=desc$Version) {
cat("The version does not correspond in the jamovi e description file")
cat(paste("jamovi:",j000$version))
cat(paste("DESCRIPTION:",j000$version))
return(FALSE)
}
desc$Version
}
getVersion<-function() {
desc<-yaml.load_file("DESCRIPTION")
j000<-yaml.load_file("jamovi/0000.yaml")
if (desc$Version!=j000$version) {
cat("Version mismatch\n")
cat(paste("jamovi:",j000$version,"  "))
cat(paste("R:",desc$Version))
return(FALSE)
}
cat(paste("preparing version",desc$Version))
desc$Version
}
version<-getVersion()
version
setwd("~/Skinner/Forge/jamovi/gamlj")
here<-getwd()
forge<-"/home/marcello/LocalForge/"
target="/home/marcello/LocalForge/gamlj/"
binaries<-"/home/marcello/LocalForge/binaries"
del<-system(paste("rm -r",target))
setwd(forge)
clone<-system("git clone https://github.com/mcfanda/gamlj.git")
setwd(forge)
cp<-system(paste("cp -r ",paste0(here,"/*"),target))
setwd(target)
(cmdz<-paste("gitversion",version))
system(cmdz)
setwd(here)
cp<-system(paste0("cp gamlj.jmo ",binaries,"/gamlj_linux.jmo"))
setwd(binaries)
git<-system(paste("gitroutine",version))
setwd(here)
library(yaml)
check.version<-function() {
desc<-yaml.load_file("DESCRIPTION")
versio<-desc$Version
j000<-yaml.load_file("jamovi/0000.yaml")
j000$version
if (j000$version!=desc$Version) {
cat("The version does not correspond in the jamovi e description file")
cat(paste("jamovi:",j000$version))
cat(paste("DESCRIPTION:",j000$version))
return(FALSE)
}
desc$Version
}
getVersion<-function() {
desc<-yaml.load_file("DESCRIPTION")
j000<-yaml.load_file("jamovi/0000.yaml")
if (desc$Version!=j000$version) {
cat("Version mismatch\n")
cat(paste("jamovi:",j000$version,"  "))
cat(paste("R:",desc$Version))
return(FALSE)
}
cat(paste("preparing version",desc$Version))
desc$Version
}
version<-getVersion()
version
setwd("~/Skinner/Forge/jamovi/gamlj")
here<-getwd()
forge<-"/home/marcello/LocalForge/"
target="/home/marcello/LocalForge/gamlj/"
binaries<-"/home/marcello/LocalForge/binaries"
del<-system(paste("rm -r",target))
setwd(forge)
clone<-system("git clone https://github.com/mcfanda/gamlj.git")
setwd(forge)
cp<-system(paste("cp -r ",paste0(here,"/*"),target))
setwd(target)
(cmdz<-paste("gitversion",version))
system(cmdz)
setwd(here)
cp<-system(paste0("cp gamlj.jmo ",binaries,"/gamlj_linux.jmo"))
setwd(binaries)
git<-system(paste("gitroutine",version))
setwd(here)
########## gmlm #####################
hdp <- read.csv("https://stats.idre.ucla.edu/stat/data/hdp.csv")
hdp <- within(hdp, {
Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
DID <- factor(DID)
HID <- factor(HID)
})
head(hdp)
m <- glmer(remission ~ IL6 + CRP + CancerStage + LengthofStay + Experience +
(1 | DID), data = hdp, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
########## gmlm #####################
library(lmerTest)
m <- glmer(remission ~ IL6 + CRP + CancerStage + LengthofStay + Experience +
(1 | DID), data = hdp, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(m)
emmeans(m,~CancerStage)
library(emmeans)
emmeans(m,~CancerStage)
emm_s.t <- emmeans(m, pairwise ~ CancerStage)
emm_s.t
test(emm_s.t,join=T)
emm_s.t <- emmeans(m, ~ CancerStage)
test(emm_s.t,join=T)
emm_s.t
test(emm_s.t,join=T)
emm_s.t <- emmeans(m, ~ CancerStage, contr = "poly")
emm_s.t
test(emm_s.t,join=T)
car::Anova(m)
m <- glmer(remission ~ CancerStage + (1 | DID), data = hdp, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(m)
emmeans(m,~CancerStage)
car::Anova(m)
car::Anova(m,type=3)
emm_s.t <- emmeans(m, ~ CancerStage, contr = "poly")
test(emm_s.t,join=T)
confint(m)
dat<-read.csv("data/generalized.csv")
names(dat)
dat$bfac<-factor(dat$bfac)
dat$dic<-factor(dat$dic)
contrasts(dat$dic)<-contr.sum(2)
contrasts(dat$bfac)<-contr.sum(2)
dat$groups3<-factor(dat$groups3)
contrasts(dat$groups3)<-contr.sum(3)
table(dat$counts)
library(jmvcore)
library(emmeans )
model<-glm(counts~bfac*x,data=dat,family = poisson(link = "log"))
lp.preparePlotData(model,groupName = "x",linesName = "bfac")
summary(model)
car::Anova(model,type=3)
model<-glm(counts~bfac*x,data=dat,family = quasipoisson())
summary(model)
car::Anova(model,type=3)
model<-glm(counts~w,data=dat,family =negative.binomial())
library(MASS)
model<-glm(counts~w,data=dat,family =negative.binomial())
model<-glm(counts~w,data=dat,family =negative.binomial(theta = 1))
model<-glm(counts~w,data=dat,family =negative.binomial(theta = 2))
model<-glm(counts~w,data=dat,family =negative.binomial(theta = 3))
model<-glm(counts~w,data=dat,family =negative.binomial(theta = 4))
model<-glm(counts~x,data=dat,family =negative.binomial(theta = 4))
summary(model)
model<-glm(counts~x,data=dat,family =negative.binomial(theta = 1))
summary(model)
model<-glm(counts~x,data=dat,family = quasipoisson())
summary(model)
model<-glm.nb(counts~x,data=dat)
summary(model)
model<-glm(counts~x,data=dat,family =negative.binomial(theta = 1))
summary(model)
model<-glm(counts~x,data=dat,family =negative.binomial(theta = 17.45313))
summary(model)
model<-glm.nb(counts~x,data=dat)
warnings()
model<-glm.nb(counts~x,data=dat,glm.control(maxit = 500,trace = 1))
model<-glm.nb(counts~x,data=dat,glm.control(list(maxit = 500,trace = 1)))
model<-glm.nb(counts~x,data=dat,glm.control(list(epsilon=0.0001, maxit = 500,trace = 1)))
model<-glm.nb(counts~x,data=dat,glm.control(list( maxit = 500,trace = 1)))
model<-glm.nb(counts~x,data=dat,glm.control(list(maxit = 500,trace = 1)))
model<-glm.nb(counts~x,data=dat,glm.control(list(maxit = 500)))
model<-glm.nb(counts~x,data=dat,glm.control(maxit = 500))
model<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model)
model<-glm(counts~x,data=dat,family =negative.binomial(theta = 17.45313))
summary(model)
model<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model)
model<-glm(counts~x,data=dat,family =poisson())
summary(model)
model<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model)
model<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model)
model<-glm(counts~x,data=dat,family =poisson())
summary(model)
model<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model)
model<-glm.nb(counts~w,data=dat,control=glm.control(maxit = 500))
summary(model)
model<-glm.nb(counts~w,data=dat,control=glm.control(maxit = 500))
install.packages("pscl")
library(pscl)
model0<-glm(counts~x,data=dat,family =poisson())
model1<-glm.nb(counts~w,data=dat,control=glm.control(maxit = 500))
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model)
vuong(model0,model1)
vuong
vuong(model0,model1)
summary(model0)
summary(model1)
summary(model0)
summary(model1)
vuong(model0,model1)
#install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))
library(jmvtools)
#jpath<-"/home/marcello/LocalForge/jamovi/lib/R/library/compiler/"
#install(home = jpath)
#jmvtools::check()
jmvtools::install()
install.packages("tweedie")
library(tweedie)
model<-glm(counts~x,data=dat,family =tweedie())
library(tweedie)
library(statmod)
install.packages("statmode")
install.packages("statmod")
library(statmod)
model<-glm(counts~x,data=dat,family =tweedie())
dat<-read.csv("data/generalized.csv")
names(dat)
dat$bfac<-factor(dat$bfac)
dat$dic<-factor(dat$dic)
contrasts(dat$dic)<-contr.sum(2)
contrasts(dat$bfac)<-contr.sum(2)
dat$groups3<-factor(dat$groups3)
contrasts(dat$groups3)<-contr.sum(3)
table(dat$counts)
library(jmvcore)
library(emmeans )
model<-glm(counts~bfac*x,data=dat,family = poisson(link = "log"))
lp.preparePlotData(model,groupName = "x",linesName = "bfac")
summary(model)
car::Anova(model,type=3)
library(tweedie)
library(statmod)
model<-glm(counts~x,data=dat,family =tweedie())
summary(model)
model<-glm(counts~bfac,data=dat,family =tweedie())
summary(model)
car::Anova(model,type=3)
summary(model)
emmeans(model,~bfac)
model<-glm(counts~bfac,data=dat,family =tweedie(var.power = 1))
summary(model)
model<-glm(counts~bfac*x,data=dat,family = poisson(link = "log"))
summary(model)
model<-glm(counts~bfac,data=dat,family = poisson(link = "log"))
summary(model)
model<-glm(counts~bfac,data=dat,family =tweedie(var.power = 1))
summary(model)
model<-glm(counts~x,data=dat,family = poisson(link = "log"))
lp.preparePlotData(model,groupName = "x",linesName = "bfac")
summary(model)
model<-glm(counts~x,data=dat,family = poisson(link = "log"))
summary(model)
model<-glm(counts~bfac,data=dat,family =tweedie(var.power = 1))
summary(model)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
summary(model)
model<-glm(counts~x,data=dat,family = poisson(link = "log"))
summary(model)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
summary(model)
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
library(pscl)
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
library(MASS)
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model1)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
summary(model)
model<-glm(counts~x,data=dat,family = poisson(link = "log"))
summary(model)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
summary(model)
summary(model,dispersion = 1)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
summary(model,dispersion = 1)
AICtweedie(model)
AICtweedie(model,dispersion = 1)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
AICtweedie(model,dispersion = 1)
warnings()
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
AICtweedie(model,dispersion = 1)
summary(model,dispersion = 1)
model$aic
AICtweedie(model,dispersion = 1)
AICtweedie(model,dispersion = 3)
AICtweedie(model,dispersion = 1)
nobs(model)
AIC(model)
AICtweedie(model,dispersion = 1)
AICtweedie(model)
AICtweedie(model,dispersion = 1)
model$aic
logLik(model)
vuong(model0,model1)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
AICtweedie(model,dispersion = 1)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 2))
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1.1))
summary(model)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
summary(model)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1.0001))
summary(model)
model<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
summary(model)
AICtweedie(model,dispersion = 1,k=1)
model<-glm(counts~bfac,data=dat,family =tweedie(var.power = 1))
summary(model)
AICtweedie(model,dispersion = 1,k=1)
summary(model,dispersion = 1)
AICtweedie(model,dispersion = 1,k=1)
AICtweedie(model,dispersion = 1)
summary(model,dispersion = 1)
model0<-glm(counts~bfac,data=dat,family =poisson())
summary(model)
model0<-glm(counts~bfac,data=dat,family =poisson())
summary(model)
summary(model0)
summary(model)
model0<-glm(counts~bfac,data=dat,family =poisson())
summary(model0)
model<-glm(counts~bfac,data=dat,family =tweedie(var.power = 1))
summary(model)
vuong(model0,model1)
model1<-glm(counts~bfac,data=dat,family =tweedie(var.power = 1))
vuong(model0,model1)
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model1)
vuong(model0,model1)
model0<-glm(counts~bfac,data=dat,family =poisson())
summary(model0)
library(pscl)
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model1)
vuong(model0,model1)
AIC(model0)
AIC(model1)
model3<-glm(counts~bfac,data=dat,family =tweedie(var.power = 1))
summary(model3)
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model1)
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model1)
vuong(model0,model1)
model0<-glm(counts~bfac,data=dat,family =poisson())
summary(model0)
model3<-glm(counts~bfac,data=dat,family =tweedie(var.power = 1))
summary(model3)
model3<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
model0<-glm(counts~x,data=dat,family =poisson())
summary(model0)
model3<-glm(counts~x,data=dat,family =tweedie(var.power = 1))
summary(model3)
summary(model3)$dispersion
#sample size
n <- 10
#regression coefficients
beta0 <- 1
beta1 <- 0.2
#generate covariate values
x <- runif(n=n, min=0, max=1.5)
#compute mu's
mu <- exp(beta0 + beta1 * x)
#generate Y-values
> y <- rpois(n=n, lambda=mu)
#generate Y-values
y <- rpois(n=n, lambda=mu)
#data set
> data <- data.frame(y=y, x=x)
#data set
data <- data.frame(y=y, x=x)
model3<-glm(y~x,data=data,family =tweedie(var.power = 1))
summary(model3)$dispersion
AICtweedie(model,dispersion = 1)
AICtweedie(model3)
AICtweedie(model3,dispersion = 1)
dd<-summary(model3)$dispersion
AICtweedie(model3,dispersion = dd)
dd<-summary(model3)$dispersion
AICtweedie(model3,dispersion = dd)
AICtweedie(model3,dispersion = 1)
summary(model,dispersion = 1)
summary(model3,dispersion = 1)
model0<-glm(y~x,data=data,family =poisson())
summary(model0)
model1<-glm.nb(counts~x,data=dat,control=glm.control(maxit = 500))
summary(model1)
model1<-glm.nb(y~x,data=dat,control=glm.control(maxit = 500))
summary(model1)
model1<-glm.nb(y~x,data=dat,control=glm.control(maxit = 500))
model1<-glm.nb(y~x,data=data,control=glm.control(maxit = 500))
summary(model1)
AIC(model3)
AICtweedie(model3,dispersion = 1)
AIC(model0)
AIC(model1)
vuong(model0,model1)
vuong(model1,model0)
#sample size
n <- 10
#regression coefficients
beta0 <- 1
beta1 <- 0.2
#generate covariate values
x <- runif(n=n, min=0, max=1.5)
#compute mu's
mu <- exp(beta0 + beta1 * x)
#generate Y-values
y <- rpois(n=n, lambda=mu)
#data set
data <- data.frame(y=y, x=x)
model3<-glm(y~x,data=data,family =tweedie(var.power = 1))
dd<-summary(model3)$dispersion
AICtweedie(model3,dispersion = 1)
summary(model3,dispersion = 1)
model0<-glm(y~x,data=data,family =poisson())
summary(model0)
AIC(model0)
model1<-glm.nb(y~x,data=data,control=glm.control(maxit = 500))
AIC(model1)
summary(model1)
vuong(model1,model0)
y
#sample size
n <- 10
#regression coefficients
beta0 <- 1
beta1 <- 0.2
#generate covariate values
x <- runif(n=n, min=0, max=1.5)
#compute mu's
mu <- exp(beta0 + beta1 * x)
#generate Y-values
y <- rpois(n=n, lambda=mu)
#data set
data <- data.frame(y=y, x=x)
model3<-glm(y~x,data=data,family =tweedie(var.power = 1))
dd<-summary(model3)$dispersion
AICtweedie(model3,dispersion = 1)
summary(model3,dispersion = 1)
model0<-glm(y~x,data=data,family =poisson())
summary(model0)
AIC(model0)
model1<-glm.nb(y~x,data=data,control=glm.control(maxit = 500))
AIC(model1)
summary(model1)
vuong(model1,model0)
AIC(model1)
logLik(model1)
logLik(model0)
logLik(model1)/logLik(model0)
model<-glm(dic~bfac+x+w,data=dat,family = binomial("probit"))
summary(model)
model<-glm(dic~bfac+x+w,data=dat,family = binomial())
summary(model)
0.28249 *1.6
-0.10447  *1.6
0.03344 *1.6
model0<-glm(dic~bfac+x+w,data=dat,family = binomial())
summary(model)
model1<-glm(dic~bfac+x+w,data=dat,family = binomial("probit"))
summary(model)
cbind(coef(model0),coef(model1))
q<-cbind(coef(model0),coef(model1))
a[,1]/q[,2]
q[,1]/q[,2]
exp(q)
exp(q[,1])
q<-cbind(coef(model0),coef(model1))
exp(q[,1])
cbind(exp(q[,1]),coef(model1))
#jpath<-"/home/marcello/LocalForge/jamovi/lib/R/library/compiler/"
#install(home = jpath)
#jmvtools::check()
jmvtools::install()
#jpath<-"/home/marcello/LocalForge/jamovi/lib/R/library/compiler/"
#install(home = jpath)
#jmvtools::check()
jmvtools::install()
#jpath<-"/home/marcello/LocalForge/jamovi/lib/R/library/compiler/"
#install(home = jpath)
#jmvtools::check()
jmvtools::install()
#jpath<-"/home/marcello/LocalForge/jamovi/lib/R/library/compiler/"
#install(home = jpath)
#jmvtools::check()
jmvtools::install()
#jpath<-"/home/marcello/LocalForge/jamovi/lib/R/library/compiler/"
#install(home = jpath)
#jmvtools::check()
jmvtools::install()
