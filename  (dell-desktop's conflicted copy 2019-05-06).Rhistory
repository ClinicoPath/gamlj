library(gamlj)
gamlj::gamljMixed(
formula = y ~ 1 + x + fac +( 1 | cl ),
data = data,
simpleVariable = x,
simpleModerator = fac)
jmvtools::install(debug = T)
library(gamlj)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
library(gamlj)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
gamlj::gamljMixed(
formula = y ~ 1 + x + fac +( 1 | cl ),
data = data,
simpleVariable = x,
simpleModerator = fac)
gamlj::gamljGLM(
formula = y ~ 1 + x + fac ,
data = data,
simpleVariable = x,
simpleModerator = fac)
gamlj::gamljMixed(
formula = y ~ 1 + x + fac +( 1 | cl ),
data = data,
simpleVariable = x,
simpleModerator = fac)
context("gzlm")
gamlj_options("debug",FALSE)
data("hsbdemo")
data<-hsbdemo
test_that("gzlm logistic coherence",{
expect_error(gamlj::gamljGzlm(
formula = ses ~ 1,
data = data,
modelSelection = "logistic")
)}
)
mod<-gamlj::gamljGzlm(
formula = schtyp ~ write + honors + honors:write,
data = data,
modelSelection = "logistic")
mod
mod<-gamlj::gamljGLM(
data = hsbdemo,
formula=science~math+schtyp+math:schtyp,
ciWidth=90,
simpleVariable = "math",
simpleModerator = "schtyp",
plotHAxis = "math"
)
mod
mod<-gamlj::gamljGzlm(
formula = schtyp ~ write + honors + honors:write,
data = data,
modelSelection = "logistic",
ciWidth=90,
simpleVariable = "write",
simpleModerator = "honors",
plotHAxis = "write"
)
mod
jmvcore::toB64("thewintersicoming")
library(gamlj)
jmvcore::toB64("winteriscoming")
jmvcore::toB64("thewinteriscoming")
jmvcore::toB64("winteriscoming")
library(gamlj)
library(gamlj)
library(gamlj)
data("qsport")
gamlj::gamljGLM(
formula = performance ~ hours + type,
data = qsport)
gamlj::gamlj_simpleEffects(model,variable = hours,moderator = type)
gamlj::gamlj_simpleEffects(model,variable = "hours",moderator = "type")
model<-gamlj::gamljGLM(
formula = performance ~ hours + type,
data = qsport)
gamlj::gamlj_simpleEffects(model,variable = "hours",moderator = "type")
model<-gamlj::gamljGLM(
formula = performance ~ hours * type,
data = qsport)
model
gamlj::gamlj_simpleEffects(model,variable = "hours",moderator = "type")
library(gamlj)
library(gamlj)
library(gamlj)
remove.packages("gamlj", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
library(gamlj)
library(gamlj)
detach("package:gamlj", unload=TRUE)
library("gamlj", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
data(qsport)
mod<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
gamlj_plot(mod,haxis = "hours")
mod<-gamlj::gamljGLM(
formula = performance ~ hours+ I(hours^2),
data = qsport)
gamlj_plot(mod,haxis = "hours")
gamlj_plot(mod,haxis = "hours",plotRaw = T)
detach("package:gamlj", unload=TRUE)
library(gamlj)
gamlj::gamljGLM(formula = len ~ supp,  data = ToothGrowth)
gamlj::gamljGLM(dep= len,factors=supp,  data = ToothGrowth)
gamlj::gamljGLM(dep= len,factors=supp, modelTerms = c("supp"),  data = ToothGrowth)
names(ToothGrowth)
class(ToothGrowth$dose)
gamlj::gamljGLM(dep= len,factors=supp, modelTerms = c("supp"),  data = ToothGrowth,
plotHAxis = "supp")
mod<-gamlj::gamljGLM(dep= len,factors=supp, modelTerms = c("supp"),  data = ToothGrowth,
plotHAxis = "supp")
mod$descPlot
q<-mod$descPlot
class(q)
q<-mod$descPlot$plot
class(q)
gamlj_ggplot(mod)
q<-gamlj_ggplot(mod)
class(q)
jmvtools::install(debug = T)
library(gamlj)
library(gamlj)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
library(gamlj)
jmvtools::install(debug = T)
library(gamlj)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
library(gamlj)
library(gamlj)
jmvtools::install(debug = T)
jmvtools::install(debug = T)
family()
y<-rbinom(10,3,.3)
y
y<-pbinom(10,3,.3)
(y<-pbinom(10,3,.3))
(y<-pbinom(10,3,.3))
(y<-rbinom(10,3,.3))
(y<-rbinom(10,3,.3))
(y<-rbinom(10,3,.3)/10)
(y<-rbinom(100,3,.3)/10)
hist(y)
(y<-rbinom(100,3,.3)/10)
hist(y)
glm(y~1,family = binomial())
w<-rep(10,100)
glm(y~1,family = binomial(),weights = w)
x<-rnorm(100)
q<-gamlj_ggplot(mod)
x<-rnorm(100)
z = 1 + 2*x        # linear combination with a bias
pr = 1/(1+exp(-z))         # pass through an inv-logit function
pr
y = rbinom(100,1,pr)      # bernoulli response variable
y
glm(y~1,family = binomial())
glm(y~1+x,family = binomial())
summary(mod)
mod<-glm(y~1+x,family = binomial())
summary(mod)
y = rbinom(100,10,pr)      # bernoulli response variable
y
mod<-glm(y~1+x,family = binomial())
mod<-glm(y~1+x,family = binomial(),weights = 10)
mod<-glm(y~1+x,family = binomial(),weights = rep(10,100))
mod<-glm(y~1,family = binomial(),weights = rep(10,100))
y
mod<-glm(y~1+x,family = binomial(),weights = rep(10,100))
summary(mod)
mod<-glm(y~1+x,family = binomial(),weights = rep(10,100))
y
y = rbinom(100,10,pr)/10      # bernoulli response variable
mod<-glm(y~1+x,family = binomial(),weights = rep(10,100))
summary(mod)
mod<-glm(y~1+x,family = binomial(),weights = rep(10,100))
summary(mod)
r<-12
y = rbinom(100,r,pr)/r      # bernoulli response variable
mod<-glm(y~1+x,family = binomial(),weights = rep(r,100))
summary(mod)
x<-rnorm(100)
z = 1 + 2*x        # linear combination with a bias
pr = 1/(1+exp(-z))  # pass through an inv-logit function
r<-12
y = rbinom(100,r,pr)/r      # bernoulli response variable
mod<-glm(y~1+x,family = binomial(),weights = rep(r,100))
summary(mod)
r<-12
y = rbinom(100,r,pr)/r      # bernoulli response variable
mod<-glm(y~1+x,family = binomial(),weights = rep(r,100))
summary(mod)
r<-12
y = rbinom(100,r,pr)/r      # bernoulli response variable
mod<-glm(y~1+x,family = binomial(),weights = rep(r,100))
summary(mod)
r<-10
y = rbinom(100,r,pr)/r      # bernoulli response variable
mod<-glm(y~1+x,family = binomial(),weights = rep(r,100))
summary(mod)
r<-10
y = rbinom(100,r,pr)/r      # bernoulli response variable
mod<-glm(y~1+x,family = binomial(),weights = rep(r,100))
summary(mod)
r<-10
y = rbinom(100,r,pr)/r      # bernoulli response variable
mod<-glm(y~1+x,family = binomial(),weights = rep(r,100))
summary(mod)
library(lme4)
install.packages("roxygen2")
install.packages("emmeans")
version
install.packages("MASS")
install.packages("nnet")
install.packages("ggplot2")
install.packages("lme4")
install.packages("gridExtra")
#install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))
install.packages('jmvtools', repos=c('https://repo.jamovi.org'))
devtools::install_github('jamovi/jmvcore')
install.packages("devtools")
install.packages("lmerTest")
devtools::install_github('jamovi/jmvcore')
devtools::install_github('jamovi/jmvcore')
install.packages("car")
library(gamlj)
devtools::install_github("gamlj/gamlj")
library(gamlj)
data("qsport")
gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
library(gamlj)
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
gamlj_data(obj)
data<-gamlj_data(obj)
data("qsport")
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
gdata<-gamlj_data(obj)
lm(performance ~ hours,data=gdata)
obj
library(gamlj)
library(gamlj)
data("qsport")
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
gmodel<-gamlj_model(obj)
library(gamlj)
data("qsport")
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
gmodel<-gamlj_model(obj)
summary(gmodel)
gmodel
gmodel$.model
gmodel$Private
gmodel$.__enclos_env__
gmodel$.__enclos_env__$private
gmodel$.__enclos_env__$private$..modelTerms
obj$options
obj$options$values()
obj$options$values
obj$options$values
q<-obj$options$values
q<-obj$options$values()
str(obj)
obj$items
str(obj)
obj$analysis
obj$analysis$data
obj$analysis$formula
obj$analysis$results
obj$analysis$run()
obj$analysisId
str(obj)
obj$assumptions
obj$assumptions$asDF
str(obj)
obj$status
obj$get(".model")
obj$get()
obj$analysis
obj$analysis$complete
str(obj)
obj$root
str(obj)
obj$name
obj$options
class(obj)
gdata<-gamlj_data(obj)
gdata
obj$private
obj$.private
gobj$options$.getData()
obj$options$.getData()
obj$options$analysis$data
str(obj$options$analysis)
str(obj$options$analysis$.readDataset)
str(obj$options$analysis$.readDataset())
obj$options$analysis$.readDataset
obj$options$analysis$readDataset()
obj$options$analysis$readDataset
obj$options$analysis$readDataset()
obj$options$analysis$
obj$options$analysis
obj$options$analysis
obj$options$analysis$serialize()
obj$options$analysis$analysisId
obj$options$analysis$analysisId
obj$options$analysis$asSource()
obj$options$analysis$asSource()
obj$options$contrasts
obj$options$values()
obj$options$values()
vv<-obj$options$values()
vv$simpleScale
vv
str(obj)
obj$options$requiresData
obj$analysis$data
obj$analysis$asSource()
obj$analysis$clone()
obj$analysis$serialize()
obj$main$anova$asDF
library(gamlj)
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
obj$options
obj$options$dep
obj$analysis
obj$analysis$asProtoBuf()
obj$analysis$check()
obj$analysis$.save()
obj[['.__enclos_env__']]$private
obj[['.__enclos_env__']]
str(obj[['.__enclos_env__']])
obj$.__enclos_env__
obj$.__enclos_env__$private
obj$.__enclos_env__$private$deep_clone()
str(obj$.__enclos_env__$private)
obj$.__enclos_env__$private
obj$.__enclos_env__$private$.parent
obj$.__enclos_env__$private$.refs
obj$.__enclos_env__$private$.index
obj$.__enclos_env__$private$.clean_data()
obj$.__enclos_env__$private
obj$.__enclos_env__$private$.cleandata()
obj$.__enclos_env__$private$cleandata()
obj$.__enclos_env__$private$.cleandata()
obj$.__enclos_env__$super
obj$.__enclos_env__$super$.__enclos_env__
obj$.__enclos_env__$super$.__enclos_env__$private
jmvtools::install(debug = T)
#install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))
install.packages('jmvtools', repos=c('https://repo.jamovi.org'))
jmvtools::install(debug = T)
data("qsport")
library(gamlj)
$get
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
library(gamlj)
library(gamlj)
data("qsport")
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = qsport)
obj$analysis
obj$model
summary(obj$model)
obj$model$model
names(obj$model)
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
scaling = "standardized",
data = qsport)
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
scaling = list("standardized"),
data = qsport)
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
scaling = list(hours="standardized"),
data = qsport)
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = data,
scaling = list(
list(
var="hours",
type="standardized")))
obj$model
obj$model$model
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = data)
obj$model$model
obj
obj$model$model
data("qsport")
obj<-gamlj::gamljGLM(
formula = performance ~ hours,
data = data,
scaling = list(
list(
var="hours",
type="standardized")))
obj$model$model
terms(  formula = performance ~ hours)
terms( performance ~ hours)
vars( performance ~ hours)
terms( performance ~ hours)
obj$options$.getData()
obj$model$model
obj$options$.getData()
names(obj$options$.getData())
data<-obj$model$model
names(data)<-names(obj$options$.getData())
head(data)
gobj$model
obj$model
obj$model$residuals
obj$model
attr(obj$model)
attributes(obj$model)
obj$model$effects
obj$model$fitted.values
obj$model$assign
obj$model$terms
attr(obj$model$terms,"term.labels")
attr(obj$model$terms,"term.labels")<-"cccc"
obj$model$terms
attr(obj$model$terms,"term.labels")
attr(obj$model$terms,"term.labels")<-"ss"
obj$model$terms
attr(obj$model$terms,"term.labels")<-"ss"
attr(obj$model$terms,"term.labels")
attr(obj$model$terms,"term.labels")<-1
attr(obj$model$terms,"term.labels")$
data("qsport")
attr(obj$model$terms,"term.labels")
attr(obj$model$terms,"term.labels")="s"
obj$model$terms
q<-attr(obj$model$terms,"term.labels")
q<-attr(obj$model$terms,"term.labels")
attr(obj$model$terms,"term.labels")<-q
obj$model$terms
q<-attr(obj$model$terms,"variables")
q
attr(obj$model$terms,"term.labels")<-q
q<-attr(obj$model$terms,"variables")
attr(obj$model$terms,"term.labels")<-q
obj$model$terms
attr(obj$model$terms,"term.labels")<-q
mm<-obj$model$terms
mm
attributes(mm)
mm$term.labels<-"q"
attributes(mm)
mm<-obj$model$terms
mm$term.labels<-"q"
attributes(mm)
mm$term.labels
attributes(mm)
attr(mm,"term.labels")<-q
mm
mm<-obj$model$terms
q<-attr(obj$model$terms,"term.labels")
attr(mm,"term.labels")<-q
mmterm.labels
attributes(mm)
q
attr(mm,"term.labels")<-"x"
attributes(mm)
mm<-obj$model
attr(mm$terms,"term.labels")<-"x"
mm
mm$coefficients
names(mm$coefficients)
names(mm$coefficients)<-c("I","x")
mm
attributes(mm)
summary(mm)
terms(performance ~ hours)
terms(performance ~ hours+(1|id))
